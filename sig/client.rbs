module River
  MAX_ATTEMPTS_DEFAULT: Integer
  PRIORITY_DEFAULT: Integer
  QUEUE_DEFAULT: String

  class Client
    @advisory_lock_prefix: Integer?
    @driver: _Driver
    @time_now_utc: ^() -> Time

    def initialize: (_Driver driver, ?advisory_lock_prefix: Integer?) -> void
    def insert: (jobArgs, ?insert_opts: InsertOpts) -> InsertResult
    def insert_many: (Array[jobArgs | InsertManyParams]) -> Integer

    private def check_advisory_lock_prefix_bounds: (Integer?) -> Integer?

    DEFAULT_UNIQUE_STATES: Array[jobStateAll]
    EMPTY_INSERT_OPTS: InsertOpts

    private def check_unique_job: (Driver::JobInsertParams, UniqueOpts?) { () -> InsertResult } -> InsertResult
    private def make_insert_params: (jobArgs, InsertOpts, ?is_insert_many: bool) -> [Driver::JobInsertParams, UniqueOpts?]
    private def truncate_time: (Time, Integer) -> Time
    private def uint64_to_int64: (Integer) -> Integer

    TAG_RE: Regexp

    private def validate_tags: (Array[String]?) -> Array[String]?
  end

  class InsertManyParams
    @args: jobArgs
    @insert_opts: InsertOpts?

    attr_reader args: jobArgs
    attr_reader insert_opts: InsertOpts?

    def initialize: (jobArgs job, ?insert_opts: InsertOpts?) -> void
    def is_a?: (Class) -> bool
  end

  class InsertResult
    @job: JobRow
    @unique_skipped_as_duplicated: bool

    attr_reader job: JobRow
    attr_reader unique_skipped_as_duplicated: bool

    def initialize: (JobRow job, ?unique_skipped_as_duplicated: bool) -> void
  end
end
